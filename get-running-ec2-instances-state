import boto3
import os
import traceback
import json

def close(session_attributes, fulfillment_state, message):
    """
    Returns a response to the Lex Bot as stated in the documentation
    https://docs.aws.amazon.com/lex/latest/dg/lambda-input-response-format.html

    :param session_attributes: Application-specific session attributes that the client sends in the request.

    :param fulfillment_state: Fulfilled or Failed

    :param message: Message to convey to the user.

    :return: response: response in format required by AWS Lex
    """
    response = {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Close',
            'fulfillmentState': fulfillment_state,
            'message': message
        }
    }
    return response


def getEc2InstanceCountByState(event, **kwargs):
    """
    Get the number of EC2 instances in a region,
    split count by instance state

    :type regionName: string
    :param regionName: The name of the region associated with the client.

    :type numberOfRunningInstancesInRegion: int
    :return: numberOfRunningInstancesInRegion: Number of running EC2 instances in a region
    """
    instanceStatesCount= {
            'pending': 0,
            'running': 0,
            'shutting-down': 0,
            'terminated': 0,
            'stopping': 0,
            'stopped': 0
    }
    try:
        ec2Client = boto3.client('ec2', region_name=kwargs['regionName'])
    except:
        print 'There was an error connecting to EC2 APIs in region "%s": \n' %(kwargs['regionName']) + str(traceback.format_exc())
    try:
        paginator = ec2Client.get_paginator('describe_instances')
        page_iterator = paginator.paginate()
        for page in page_iterator:
            for reservation in page['Reservations']:
                instanceStatesCount[reservation['Instances'][0]['State']['Name']]+=1
        print "Instance state in region %s:" %(kwargs['regionName'])
        for k,v in instanceStatesCount.items():
            print "%s: %d" %(k, v)
        return close(
            event["sessionAttributes"],
            'Fulfilled',
            {
               'contentType': 'PlainText',
                'content': json.dumps(instanceStatesCount)
            }
        )
    except:
       print 'There was an error getting the state of EC2 instances in region "%s": \n' %(kwargs['regionName']) + str(traceback.format_exc())
       return close(
            event["sessionAttributes"],
            'Failed',
            {
               'contentType': 'PlainText',
                'content': 'There was an error getting the state of EC2 instances'
            }
        )

def main(event, context, **kwargs):
    """
    main function

    """
    regionName=event['currentIntent']['slots']['awsRegion']
    print regionName
    awsRegions = [
        "us-east-2",
        "us-east-1",
        "us-west-1",
        "us-west-2",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-south-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "cn-north-1",
        "cn-northwest-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "sa-east-1",
    ]
    if regionName in awsRegions:
        return getEc2InstanceCountByState(event, regionName=regionName)
    else:
        return close(
            event["sessionAttributes"],
            'Failed',
            {
               'contentType': 'PlainText',
                'content': 'Region does not exists'
            }
        )
